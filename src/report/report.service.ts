import { Injectable } from '@nestjs/common';
import { GenerateReportDto } from './dto/generate-report.dto.js';
import { PrismaService } from '../prisma/prisma.service.js';

@Injectable()
export class ReportService {
  constructor(private prisma: PrismaService) {}

  async generate(generateReportDto: GenerateReportDto) {
    const { userId, dateFrom, dateTo } = generateReportDto;

    const calls = await this.prisma.call.findMany({
      where: {
        employeeId: userId,
        createdAt: {
          gte: new Date(dateFrom),
          lte: new Date(dateTo),
        },
      },
      include: {
        scores: true,
      },
    });

    const totalCalls = calls.length;
    const totalDuration = calls.reduce(
      (sum: number, call: { durationSec: number | null }) =>
        sum + (call.durationSec || 0),
      0,
    );

    const allScores = calls.flatMap((call: { scores: { score: number }[] }) =>
      call.scores.map((score: { score: number }) => score.score),
    );
    const avgScore =
      allScores.length > 0
        ? allScores.reduce((sum: number, score: number) => sum + score, 0) /
          allScores.length
        : 0;

    // A summary can be generated by an AI service in a real scenario
    const summary = `Report for user ${userId} from ${dateFrom} to ${dateTo}. Total calls: ${totalCalls}. Average score: ${avgScore.toFixed(2)}.`;

    return this.prisma.report.create({
      data: {
        userId,
        dateFrom: new Date(dateFrom),
        dateTo: new Date(dateTo),
        totalCalls,
        totalDuration,
        avgScore,
        summary,
      },
    });
  }
}
